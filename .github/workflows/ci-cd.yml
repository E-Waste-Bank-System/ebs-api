# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the $default-branch branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Cloud Storage
#      roles/storage.admin   (if using Google Container Registry (gcr) instead)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - beta # TODO: update branch name if required

env:
  PROJECT_ID: ebs-cloud-456404 # TODO: update Google Cloud project id
  GAR_LOCATION: asia-southeast2 # TODO: update Artifact Registry location
  REPOSITORY: ebs # TODO: update Artifact Registry repository name
  SERVICE: ebs-api # TODO: update Cloud Run service name
  REGION: asia-southeast2 # TODO: update Cloud Run service region

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
        #   token_format: 'access_token'
          project_id: 'ebs-cloud-456404'
        #   workload_identity_provider: 'projects/981332637673/locations/global/workloadIdentityPools/github-actions-cloud-run/providers/github' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '981332637673-compute@developer.gserviceaccount.com' # e.g. - my-service-account@my-project.iam.gserviceaccount.com
          credentials_json: '${{ secrets.GCP_SA_KEY }}' # NOTE: This is optional if using workload identity federation

      # NOTE: Alternative option - authentication via credentials json
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      #     token_format: 'access_token'

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

    #   # Authenticate Docker to Google Cloud Artifact Registry
    #   - name: Docker Auth
    #     id: docker-auth
    #     uses: 'docker/login-action@v3'
    #     with:
    #       username: 'oauth2accesstoken'
    #       password: '${{ steps.auth.outputs.access_token }}'
    #       registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # NOTE: Alternative option - authentication via credentials json
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        with:
            registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
            username: _json_key
            password: ${{ secrets.GCP_SA_KEY }}
      
      - name: Remove any GCP credentials JSON files
        run: |
          echo "Removing any GCP credentials files that might exist"
          rm -f ebs-cloud-456404-42c276033ca1.json
          find . -name "ebs-cloud-*.json" -type f -delete
          echo "Files removed successfully"

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          # Set environment variables for the Cloud Run service
          env_vars: |
            JWT_SECRET=c94xKfchSj64JJqI7cMKZbIs4n/6pB920TcQlzURwln+IV5SP+G1jIHg5u4hUVHqb9QanSU6hX+7FGr/iTQpiQ==
            SUPABASE_URL=https://dyhzmepwuzhfzbuemebb.supabase.co
            SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImR5aHptZXB3dXpoZnpidWVtZWJiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODUwNTU5MiwiZXhwIjoyMDY0MDgxNTkyfQ.WPrdVpC2gq8E3qfHke_JzUsdE-48tVlzdL_wYutCJqw
            GCP_BUCKET=ebs-storage
            GCP_PROJECT_ID=ebs-cloud-456404
            GOOGLE_CLIENT_ID=981332637673-otgo810evdbis5hd6oa6pkiq4ha6dq3e.apps.googleusercontent.com
            AI_URL=https://ebs-ai-981332637673.asia-southeast2.run.app/predict
            CLIENT_ORIGIN=http://localhost:3000

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
